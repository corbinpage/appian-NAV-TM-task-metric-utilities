<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<contentHaul xmlns:a="http://www.appian.com/ae/types/2009">
    <rule>
        <name>NAV_TM_returnCreatedAtIfPresent</name>
        <uuid>d2a24275-64b7-4884-aa10-548a2ef7e0b9</uuid>
        <description>Returns the ri!storedTaskMetrics.createdAt if the matching taskId is in currentTaskMetrics. Returns now() otherwise. </description>
        <parentUuid>_a-0000db6c-eae6-8000-927a-010000010000_48230</parentUuid>
        <visibility>
            <advertise>false</advertise>
            <hierarchy>true</hierarchy>
            <indexable>true</indexable>
            <quota>false</quota>
            <searchable>true</searchable>
            <system>false</system>
            <unlogged>false</unlogged>
        </visibility>
        <definition>=if(or(#&quot;_a-0000d62a-67b3-8000-da6f-010000010000_950&quot;(ri!currentTaskMetrics),#&quot;_a-0000d62a-67b3-8000-da6f-010000010000_950&quot;(ri!storedTaskMetrics)),
now(),

if(length(wherecontains(ri!currentTaskMetrics.taskId,{ri!storedTaskMetrics.taskId}))&gt;0,
index(ri!storedTaskMetrics.createdAt,wherecontains(ri!currentTaskMetrics.taskId,ri!storedTaskMetrics.taskId),now()),
now())

)</definition>
        <namedTypedValue>
            <name>currentTaskMetrics</name>
            <type>
                <name>Variant</name>
                <namespace>http://www.appian.com/ae/types/2009</namespace>
            </type>
        </namedTypedValue>
        <namedTypedValue>
            <name>storedTaskMetrics</name>
            <type>
                <name>Variant</name>
                <namespace>http://www.appian.com/ae/types/2009</namespace>
            </type>
        </namedTypedValue>
        <preferredEditor>legacy</preferredEditor>
        <offlineEnabled>false</offlineEnabled>
    </rule>
    <roleMap public="true">
        <role allowForAll="false" inherit="true" name="readers">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="authors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="administrators">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyReaders">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAuthors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAdministrators">
            <users/>
            <groups/>
        </role>
    </roleMap>
</contentHaul>
